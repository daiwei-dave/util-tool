



集合中线程安全的类有：vector，stack，hashtable，enumeration，除此之外均是非线程安全的类与接口







二。

1.list
参考自：http://blog.csdn.net/wangzff/article/details/7296648

 1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。 
 2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。 
 3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。 
 
 
 结论：数组访问快，插入和删除慢。链表插入和删除快但读取较慢
 
 
1.Vector
Vector类实现了一个动态数组。和ArrayList和相似，但是两者是不同的：
Vector是同步访问的。
Vector包含了许多传统的方法，这些方法不属于集合框架。
http://www.runoob.com/java/java-vector-class.html
 
2.map  
子集有：HashMap Hashtable LinkedHashMap 和TreeMap
ConcurrentHashMap:支持获取的完全并发和更新的所期望可调整并发的哈希表。

参考自：http://www.cnblogs.com/hubingxu/archive/2012/02/21/2361281.html
HashMap类似于数组，LinkedHashMap类似于链表。所以HashMap的读取速度要快一些


1.遍历map集合
 Map<String,String[]> origin=super.getParameterMap();
        Set<Map.Entry<String,String[]>> entries=origin.entrySet();
        Iterator<Map.Entry<String,String[]>> iterator=entries.iterator();
        while(iterator.hasNext()){
            Map.Entry<String,String[]> entry=iterator.next();
            params.put(entry.getKey(),entry.getValue());
        }
        return params;  


3.set

HashSet   由hashMap演变而来






三。


对结果排序
 Collections.sort(pageLvlList3, new Comparator() {
                    /**
                     * 升序排序
                     */
                    public int compare(Object obj1, Object obj2) {
                        PageLvl pageLvl1= (PageLvl) obj1;
                        PageLvl pageLvl2= (PageLvl) obj2;
                        return pageLvl1.getPgLvlId() - pageLvl2.getPgLvlId();
                    }
                });   
                           