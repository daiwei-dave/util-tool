





1.接口的好处
1）写接口就是设计，整理思路










在java中接口可以继承接口吗？

不仅可以继承，还可以多继承。可以用来扩展功能啊，这样不用修改父借口，方便维护。体会过具体应用场景就明白了。


1.接口
所以接口中的方法必须是public
1.interface中的方法默认为public abstract 的（用其他关键字，比如private、protected、static、 final等修饰会报编译错误）
2.变量默认为public static final（并且只能是public static final变量，用private修饰会报编译错误）
3.接口中所有的方法不能有具体的实现，也就是说，接口中的方法必须都是抽象方法
4.允许一个类遵循多个特定的接口


2.抽象类：
包含抽象方法的类称为抽象类，但并不意味着抽象类中只能有抽象方法，它和普通类一样，
同样可以拥有成员变量和普通的成员方法。注意，抽象类和普通类的主要有三点区别：
1）抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。
2）抽象类无法实例化，无法创建对象
3）如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。

3.抽象类和接口的区别
1.语法层面上的区别
1）一个类只能继承一个抽象类，而一个类却可以实现多个接口。
2）抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的；(定义常量时应用较多，便于维护)
3）抽象类可以提供成员方法的实现细节，而接口不能有具体的实现细节；
如：
abstract class Instrument4 {
int i; // storage allocated for each
public abstract void play();
public String what() {
return "Instrument4";
}
public abstract void adjust();
}
4）接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法；

2.设计层面上的区别
1）抽象类是对一种事物的抽象，即对类抽象（如果一个类继承了某个抽象类，则子类必定是抽象类的种类），
而接口是对行为的抽象（接口实现是有没有、具备不具备的关系）
2）设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计。而接口是一种行为规范