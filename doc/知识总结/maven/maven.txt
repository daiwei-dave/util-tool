
一。maven目录结构

注意这个目录结构，src/main/java 和 src/test/java 是不能改动，不然maven会无法找到源文件。下面是maven一个标准的目录结构：

src/main/java	Application/Library sources
src/main/resources	Application/Library resources
src/main/filters	Resource filter files
src/main/assembly	Assembly descriptors
src/main/config	Configuration files
src/main/scripts	Application/Library scripts
src/main/webapp	Web application sources
src/test/java	Test sources
src/test/resources	Test resources
src/test/filters	Test resource filter files
src/site	Site



groupId:代表jar包所在的组织（package的概念)，比如com.cnblogs
artifactId:是一个单独jar包（项目）的唯一表示,即项目的名字
version:代表当前项目的版本号
packaging:代表项目的类型，默认是jar，描述了项目打包后的输出
类型为jar的项目产生一个JAR文件
类型为war的项目产生一个web应用。



<!-- 依赖项 -->
<dependency>
<groupId></groupId>
<artifactId></artifactId>
<version></version>
<type></type>
<scope>依赖的范围</scope>
<optional>设置依赖是否可选，默认是false</optional>

<!-- 排除依赖传递列表 -->
<exclusions>
<exclusion></exclusion>
</exclusions>


</dependency>
</dependencies>


<!-- 依赖的管理，一般定义在父模块中，由子模块去继承 -->
<dependencyManagement>
<dependencies>
<dependency></dependency>
</dependencies>
</dependencyManagement>



<!-- 对构建行为提供相应的支持 -->
<build>
<!-- 插件列表 -->
<plugins>
<plugin>
<!-- 指定坐标 -->
<groupId></groupId>
<artifactId></artifactId>
<version></version>
</plugin>
</plugins>
</build>

<!-- 一般在子模块中指定所继承的父模块 -->
<parent></parent>

<!-- 模块列表 -->
<modules>
<module></module>
</modules>











scope:scope选项指定了maven依赖生效的范围
<plugins>：插件声明
build 设置
   主要用于编译设置，包括两个主要的元素，build和report
build
   主要分为两部分，基本元素和扩展元素集合
注意：包括项目build和profile build

xml 代码

<build>
< defaultGoal>install<defaultGoal>
< directory>${basedir}/targetdirectory>
< finalName>${artifactId}-${version}finalName>
< filters>
   <filter>filters/filter1.properties<filter>
< filters>
...
< build>


defaultGoal: 定义默认的目标或者阶段。如install
directory: 编译输出的目录
finalName: 生成最后的文件的样式
filter: 定义过滤，用于替换相应的属性文件，使用maven定义的属性。设置所有placehold的值

资源(resources)
   你项目中需要指定的资源。如spring配置文件,log4j.properties

xml 代码

<project>
< build>
   ...
   <resources>
     <resource>
       <targetPath>META-INF/plexus<targetPath>
       <filtering>falsefiltering>
       <directory>${basedir}/src/main/plexus<directory>
       <includes>
         <include>configuration.xml<include>
       <includes>
       <excludes>
         <exclude>**/*.properties<exclude>
       <excludes>
     <resource>
   <resources>
   <testResources>
     ...
   <testResources>
   ...
< build>
< project>


resources: resource的列表，用于包括所有的资源
targetPath: 指定目标路径，用于放置资源，用于build
filtering: 是否替换资源中的属性placehold
directory: 资源所在的位置
includes: 样式，包括那些资源
excludes: 排除的资源
testResources: 测试资源列表










镜像仓库：/conf/setting文件:
<mirror>
<id>maven.net.cn</id>
<mirrorOf>central</mirrorOf>
<name>central mirror in china</name>  
<url>http://maven.net.cn/content/groups/public</url>
</mirror>


maven的好处：
1.便于管理jar包，解决jar包冲突，自动处理jar包之间的依赖关系
2.分层清晰

bug:
Failure to transfer com.thoughtworks.xstream:xstream:jar:1.3.1 from http://repo.maven.apache.org/
 maven2 was cached in the local repository, resolution will not be reattempted until the update interval 
 of central has elapsed or updates are forced. Original error: Could not transfer artifact 
 com.thoughtworks.xstream:xstream:jar:1.3.1 from/to central (http://repo.maven.apache.org/maven2): 
 No response received after 60000

 
 解决办法：
将D:\maven\repository\com\thoughtworks\xstream\xstream\1.3.1下代.lastUpdated后缀的删除掉，再更新maven project


一。编译运行
更新完项目后，要先编译成功后才可运行

编译：
maven build：选择run as maven build...，在goals里输入compile(maven 编译),这样它才会使用maven编译，如果想要生成可执行jar包，需要在goals中输入package

mvn package  生成target目录，编译、测试代码，生成测试报告，生成jar/war文件
mvn compile 编译你的项目 
mvn clean  清空生成的文件，删除target
mvn install  安装jar包到本地仓库
mvn clean install 删除再编译 



二。在tomcat部署运行
1.在tomcat部署运行
1.maven clean 2.clean install 3.reflush 4.debug



