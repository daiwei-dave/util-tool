






pdf导出：参考自年会餐券

		相关依赖
		<!--pdf核心包-->
		<dependency>
             <groupId>com.itextpdf</groupId>
             <artifactId>itextpdf</artifactId>
             <version>5.5.10</version>
         </dependency>
         <!-- https://mvnrepository.com/artifact/com.itextpdf/itext-asian -->
		 
		 <!--pdf中文处理包-->
         <dependency>
             <groupId>com.itextpdf</groupId>
             <artifactId>itext-asian</artifactId>
             <version>5.2.0</version>
         </dependency>
		 
		 
		 
excel导出：
参考：		 http://www.cnblogs.com/rookie404/p/5925385.html


excel导入：

参考：		 http://blog.csdn.net/zhengxiangwen/article/details/68484857


















二.java解析xml

1.JAVA 解析 XML 通常有两种方式:DOM 和SAX。

DOM：DOM（文档对象模型）是W3C标准，提供了标准的解析方式，但其解析效率一直不尽如人意，
这是因为DOM解析XML文档时，把所有内容一次性的装载入内存，并构建一个驻留在内存中的树状结构（节点数）。
如果需要解析的XML文档过大，或者我们只对该文档中的一部分感兴趣，这样就会引起性能问题。
（即必须全部扫描完后，才能进行解析，犹如同步执行，消耗的内存更大速度更慢）

sax:SAX（simple API for XML）是一种XML解析的替代方法。相比于DOM，SAX是一种速度更快，更有效的方法。它逐行扫描文档，一边扫描一边解析。
而且相比于DOM，SAX可以在解析文档的任意时刻停止解析.(即扫描的同时，就可以进行解析，犹如并发执行速度更快，消耗的内存更低)


