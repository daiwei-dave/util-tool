


一。

字节流: 字节流是直接操作文件本身的，不使用缓冲区


1.File类只用于表示文件（目录）的信息（名称、大小等），不能用于文件内容的访问
使用File类找到一个文件
File f = new File("d:" + File.separator + "test.txt"); // 声明File  对象 

字节输入流 ：InputStream
FileInputStream：具体实现了在文件上读取数据 InputStream in=new FileInputStream(f);
System.in:从键盘中读取信息
DataInputStream:数据输入流允许应用程序以与机器无关方式从底层输入流中读取基本 Java 数据类型。
ByteArrayInputStream（读取字节流） 包含一个内部缓冲区，该缓冲区包含从流中读取的字节。内部计数器跟踪 read 方法要提供的下一个字节。
ObjectInputStream：ObjectInputStream 对以前使用 ObjectOutputStream 写入的基本数据和对象进行反序列化。

字节输出流：OutputStream
FileOutputStream 实现了向文件中写出byte数据的方法:
FileOutputStream(File file):创建一个向指定 File 对象表示的文件中写入数据的文件输出流,file为输出目的地
OutputStream out=new FileOutputStream(f);




ByteArrayOutputStream:此类实现了一个输出流，其中的数据被写入一个 byte 数组

ObjectOutputStream：ObjectOutputStream 将 Java 对象的基本数据类型和图形写入 OutputStream。
可以使用 ObjectInputStream 读取（重构）对象。通过在流中使用文件可以实现对象的持久存储。
只能将支持 java.io.Serializable 接口的对象写入流中。。 


DataOutputStream  数据输出流允许应用程序以适当方式将基本 Java 数据类型写入输出流中。然后，应用程序可以使用数据输入流将数据读入。

二。
字符流:字符流操作时要使用缓冲区
Reader是所有读取字符串输入流的祖先，而writer是所有输出字符串的祖先

FileReader： FileReader 用于读取字符流
BufferedReader  从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。

InputStreamReader   完成byte流解析为char流,按照编码解析。是字节流通向字符流的桥梁：它使用指定的 charset 读取字节并将其解码为字符。
它使用的字符集可以由名称指定或显式给定，或者可以接受平台默认的字符集。

OutputStreamWriter  提供char流到byte流，按照编码处理 


三。
什么叫缓冲区？
可以简单地把缓冲区理解为一段特殊的内存。
某些情况下，如果一个程序频繁地操作一个资源（如文件或数据库），则性能会很低，此时为了提升性能，
就可以将一部分数据暂时读入到内存的一块区域之中，以后直接从此区域中读取数据即可，因为读取内存速度会比较快，这样可以提升程序的性能。
在字符流的操作中，所有的字符都是在内存中形成的，在输出前会将所有的内容暂时保存在内存之中，所以使用了缓冲区暂存数据。
如果想在不关闭时也可以将字符流的内容全部输出，则可以使用Writer类中的flush()方法完成。





BufferedInputStream：该类实现缓冲的输入流
BufferedOutputStream：该类实现缓冲的输出流。



四。序列化与反序列化
serializable
系列化：Java的对象序列化是指将那些实现了Serializable接口的对象转换成一个字符序列，
并能够在以后将这个字节序列完全恢复为原来的对象

使用场景：
1)要进行网络传输特别是在分布式环境下,
2)写到数据库或文件中


性能：
序列化的使用会影响系统的性能，因此如果能不使用就尽量不要使用。

反序列：而反序列的过程（即将一个序列还原成为一个对象），
需要将一个InputStream(如FileInputstream、ByteArrayInputStream等)封装在ObjectInputStream内，然后调用readObject()即可。

@see http://blog.csdn.net/emira_j/article/details/51322620


五。字节和字符  （参考：https://zhidao.baidu.com/question/454436588167256525.html）
（一）“字节”的定义

字节（Byte）是一种计量单位，表示数据量多少，它是计算机信息技术用于计量存储容量的一种计量单位。

（二）“字符”的定义

字符是指计算机中使用的文字和符号，比如1、2、3、A、B、C、~！・#￥%……―*（）――+、等等。


（三）“字节”与“字符”

它们完全不是一个位面的概念，所以两者之间没有“区别”这个说法。不同编码里，字符和字节的对应关系不同：

①ASCII码中，一个英文字母（不分大小写）占一个字节的空间，一个中文汉字占两个字节的空间。一个二进制数字序列，在计算机中作为一个数字单元，一般为8位二进制数，换算为十进制。最小值0，最大值255。
②UTF-8编码中，一个英文字符等于一个字节，一个中文（含繁体）等于三个字节。

③Unicode编码中，一个英文等于两个字节，一个中文（含繁体）等于两个字节。

符号：英文标点占一个字节，中文标点占两个字节。举例：英文句号“.”占1个字节的大小，中文句号“。”占2个字节的大小。

④UTF-16编码中，一个英文字母字符或一个汉字字符存储都需要2个字节（Unicode扩展区的一些汉字存储需要4个字节）。

⑤UTF-32编码中，世界上任何字符的存储都需要4个字节。




