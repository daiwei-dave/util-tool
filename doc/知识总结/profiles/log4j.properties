# gome-gsm-web dev log4j.properties


### 设置优先级别， 日志级别：ALL<TRACE<DEBUG<INFO<WARN<ERROR<FATAL<OFF，不区分大小写，两个级别同时存在时优先打印优先级高的，默认使用log4j.rootLogger所指定的

#R所对应的日志文件，相当于把控制台里的信息全部拷贝到一个文件里
#注意，需在控制台输入，只需将其中一个appender定义为stdout即可
#注意，rootLogger设为dubug时核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，自己所继承的与rootLogger冲突时选择级别高的。
#注意，如果只想对某些包操作，那么：log4j.logger.com.hutu=info, stdout，表示该日志对package com.hutu生效
#注意，这样做可以区分dev/线上，也可以减小性能影响：if(log.isDebugEnabled()){log.debug();}

# Global logging configuration
log4j.rootLogger=INFO, Console, R, ErrorFile


#只会打印com.didispace下的本地日志，不会打印外部容器的日志，且不受rootLogger的级别影响
log4j.category.com.didispace=DEBUG, didifile





### 日志信息输出目的地 org.apache.log4j.ConsoleAppender（控制台）
log4j.appender.Console=org.apache.log4j.ConsoleAppender
#配置日志信息的格式 org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
#如：gome-gsm-web: 2017-01-12 15:32:45 DEBUG [com.alibaba.druid.filter.logging.Slf4jLogFilter] (Slf4jLogFilter.java:134) - {conn-10008, pstmt-20089} executed.
log4j.appender.Console.layout.ConversionPattern=gome-gsm-web: %d{yyyy-MM-dd HH:mm:ss} %-5p [%C] (%F:%L) - %m%n


#Threshold是个全局的过滤器，它将把低于所设置的level的信息过滤不显示出来。
log4j.appender.Console.Threshold=INFO

log4j.appender.CONSOLE.MaxFileSize=50MB
log4j.appender.CONSOLE.MaxBackupIndex=10










#File 输出，RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
log4j.appender.R=com.gome.support.log4j.appender.SizeRollingFileAppender
#指定是否是追加写入（append=true，默认情况），还是覆盖写入（append=false）。
log4j.appender.R.Append=true
log4j.appender.R.layout=org.apache.log4j.PatternLayout
log4j.appender.R.encoding=UTF-8
log4j.appender.R.MaxFileSize=50MB
### 设置日志信息文件总数最多为100个 ###
log4j.appender.R.MaxBackupIndex=100
### 设置日志信息文件名为gome-gsm-web.log，包括tomcat启动时的日志，访问后台调用的日子
log4j.appender.R.File=/gome-gsm-logs/gome-gsm-web.log
log4j.appender.R.layout.ConversionPattern=gome-gsm-web: %d{yyyy-MM-dd HH:mm:ss} %-5p [%C] (%F:%L) - %m%n







# 输出错误日志文件，只会输出error信息
log4j.appender.ErrorFile=com.gome.support.log4j.appender.SizeRollingFileAppender
log4j.appender.ErrorFile.Append=true
log4j.appender.ErrorFile.layout=org.apache.log4j.PatternLayout
log4j.appender.ErrorFile.encoding=UTF-8
log4j.appender.ErrorFile.MaxFileSize=50MB
log4j.appender.ErrorFile.MaxBackupIndex=100
#org.apache.log4j.varia.LevelRangeFilter这是一个基于级别匹配的非常简单的过滤器，可用于拒绝优先级超出一定范围的邮件。
log4j.appender.ErrorFile.filter.ErrorFileFilter=org.apache.log4j.varia.LevelRangeFilter
# 最低级别为error
log4j.appender.ErrorFile.filter.ErrorFileFilter.LevelMin=ERROR
log4j.appender.ErrorFile.File=/gome-gsm-logs/gome-gsm-web-error.log
log4j.appender.ErrorFile.layout.ConversionPattern=gome-gsm-web-error: %d{yyyy-MM-dd HH:mm:ss} %-5p [%C] (%F:%L) - %m%n

# sql进行编译时，所有级别的日志都要打印
log4j.logger.druid.sql.Statement=ALL

log4j.logger.Mapper=ALL
# dubbo打印warm级别及以上，warm级别以下的将不会打印
log4j.logger.com.alibaba.dubbo=WARN

log4j.logger.org.apache.zookeeper=WARN




#com.ibatis包下打印error级别
log4j.logger.com.ibatis=ERROR
#连接池打印error级别
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=ERROR
#ScriptRunner类用于执行SQL语句,例如创建数据库schema，或传入缺省或测试数据库等等，执行ScriptRunner类打印error级别
log4j.logger.com.ibatis.common.jdbc.ScriptRunner=ERROR
#sqlmap进行映射时打印error级别
log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=ERROR
log4j.logger.java.sql.Connection=ERROR
log4j.logger.java.sql.Statement=ERROR
#预处理语句（PreparedStatement）打印error级别
log4j.logger.java.sql.PreparedStatement=ERROR
log4j.logger.com.alibaba=INFO





